- key: absolute_error
  en:
    term: absolute error
    def: >
      The absolute value of the difference between the observed and the correct
      value. Absolute error is usually less useful than [relative
      error](#relative_error).

- key: actual_result
  en:
    term: actual result (of test)
    def: >
      The value generated by running code in a test. If this matches the
      [expected result](#expected_result), the test [passes](#pass_test); if the
      two are different, the test [fails](#fail_test).

- key: api
  en:
    term: Application Programming Interface
    def: >
      A set of functions provided by a software library or web service that
      other software can call.
    acronym: API

- key: assertion
  en:
    term: assertion
    def: >
      A [Boolean](#boolean) expression that must be true at a certain point in a
      program. Assertions may be built into the language (e.g., Python's
      `assert` statement) or provided as functions (as with Node's `assert`
      library).

- key: base_class
  ref:
  - child_class
  - derived_class
  - parent_class
  en:
    term: base class
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which other
      classes are derived.

- key: caching
  en:
    term: caching
    def: >
      To save a copy of some data in a local [cache](#cache) to make future
      access faster.

- key: chain_of_responsibility_pattern
  en:
    term: Chain of Responsibility pattern
    def: >
      A [design pattern](#design_pattern) in which each [object](#object) either
      handles a request or passes it on to another object.

- key: child_tree
  en:
    term: child (in a tree)
    def: >
      A [node](#node) in a [tree](#node) that is below another node (call the
      [parent](#parent_tree)).

- key: child_class
  en:
    term: child class
    def: >
      In [object-oriented programming](#oop), a [class](#class) derived from
      another class (called the [parent class](#parent_class)).

- key: collision
  en:
    term: collision
    def: >
      A situation in which a program tries to store two items in the same
      location in memory. For example, a collision occurs when a [hash
      function](#hash_function) generates the same [hash code](#hash_code) for
      two different items.

- key: coupling
  en:
    term: coupling
    def: >
      The degree of interaction between two [classes](#class),
      [modules](#module), or other software components. If a system's components
      are [loosely coupled](#loosely_coupled), changes to one are unlikely to
      affect others.  If they are [tightly coupled](#tightly_coupled), then any
      change requires other changes elsewhere, which complicates maintenance and
      evolution.

- key: cryptographic_hash_function
  en:
    term: cryptographic hash function
    def: >
      A [hash function](#hash_function) that produces an apparently-random value
      for any input.

- key: csv
  en:
    term: comma-separated values
    def: >
      A text format for tabular data in which each [record](#record) is one row
      and [fields](#field) are separated by commas. There are many minor
      variations, particularly around quoting of [strings](#string).
    acronym: CSV

- key: data_migration
  en:
    term: data migration
    def: >
      Moving data from one location or format to another. The term refers to
      translating data from an old format to a newer one.

- key: defensive_programming
  en:
    term: defensive programming
    def: >
      A set of programming practices that assumes mistakes will happen and
      either reports or corrects them, such as inserting
      [assertions](#assertion) to report situations that are not ever supposed
      to occur.

- key: depth_first
  en:
    term: depth-first
    def: >
      A search algorithm that explores one possibility all the way to its
      conclusion before moving on to the next.

- key: derived_class
  ref:
  - child_class
  en:
    term: derived class
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).

- key: design_pattern
  ref:
  - iterator_pattern
  - singleton_pattern
  - template_method_pattern
  - visitor_pattern
  en:
    term: design pattern
    def: >
      A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be
      provided by a [library](#library).

- key: dom
  en:
    term: Document Object Model
    def: >
      A standard, in-memory representation of [HTML](#html) and [XML](#xml).
      Each [element](#element) is stored as a [node](#node) in a [tree](#tree)
      with a set of named [attributes](#attribute); contained elements are
      [child nodes](#child_tree).
    acronym: DOM

- key: dynamic_loading
  en:
    term: dynamic loading
    def: >
      To [import](#import) a [module](#module) into the memory of a program
      while it is already running. Most [interpreted
      languages](#interpreted_language) use dynamic loading, and provide tools
      so that programs can find and load modules dynamically to configure
      themselves.

- key: eager_matching
  en:
    term: eager matching
    def: >
      Matching as much as possible, as early as possible.

- key: error_test
  en:
    term: error (in a test)
    def: >
      Signalled when something goes wrong in a [unit test](#unit_test) itself
      rather than in the system being tested. In this case, we do not know
      anything about the correctness of the system.

- key: exception_handler
  en:
    term: exception handler
    def: >
      A piece of code that deals with an [exception](#exception) after it is
      [caught](#catch_exception), e.g., by recording a message, retrying the
      operation that failed, or performing an alternate operation.

- key: expected_result
  ref:
  - actual_result
  en:
    term: expected result (of test)
    def: >
      The value that a piece of software is supposed to produce when tested in a
      certain way, or the state in which it is supposed to leave the system.

- key: exploratory_programming
  en:
    term: exploratory programming
    def: >
      A software development methodology in which requirements emerge or change
      as the software is being written, often in response to results from early
      runs.

- key: fail_test
  ref:
  - pass_test
  en:
    term: fail (a test)
    def: >
      A test fails if the [actual result](#actual_result) does not match the
      [expected result](#expected_result).

- key: fixture
  en:
    term: fixture
    def: >
      The thing on which a test is run, such as the [parameters](#parameter) to
      the function being tested or the file being processed.

- key: global_variable
  ref:
  - local_variable
  en:
    term: global variable
    def: >
      A variable defined outside any particular function or [package](#package)
      namespace, which is therefore visible to all functions.

- key: greedy_algorithm
  en:
    term: greedy algorithm
    def: >
      An algorithm that consumes as much input as possible, as early as
      possible.

- key: handler
  en:
    term: handler
    def: >
      A [callback function](#callback) responsible for handling some particular
      event, such as the user clicking on a button or new data being receiving
      from a file.

- key: hash_code
  en:
    term: hash code
    def: >
      A value generated by a [hash function](#hash_function). Good hash codes
      have the same properties as random numbers in order to reduce the
      frequency of [collisions](#collision).

- key: hash_function
  en:
    term: hash function
    def: >
      A function that turns arbitrary data into a bit array, or a [key](#key),
      of a fixed size. Hash functions are used to determine where data should be
      stored in a [hash table](#hash_table).

- key: introspection
  en:
    term: introspection
    def: >
      Having a program examine itself as it is running; common examples are to
      determine the specific class of a generic object or to get the fields of
      an object when they are not known in advance.

- key: json
  ref:
  - yaml
  en:
    term: JavaScript Object Notation
    def: >
      A way to represent data by combining basic values like numbers and
      character strings in [lists](#list) and [key/value](#dictionary)
      structures. The acronym stands for "JavaScript Object Notation"; unlike
      better-defined standards like [XML](#xml), it is unencumbered by a syntax
      for comments or ways to define a [schema](#schema).
    acronym: JSON

- key: lazy_matching
  ref:
  - eager_matching
  en:
    term: lazy matching
    def: >
      Matching as little as possible while still finding a valid match.

- key: library
  en:
    term: library
    def: >
      An installable collection of software, also often called a
      [module](#module) or [package](#package).

- key: lifecycle
  en:
    term: lifecycle
    def: >
      The steps that something is allowed or required to go through. The
      lifecycle of an [object](#object) runs from its
      [construction](#constructor) through the operations it can or must perform
      before it is destroyed.

- key: mock_object
  en:
    term: mock object
    def: >
      A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to
      simulate databases, web services, and other complex systems.

- key: node
  en:
    term: node
    def: >
      An element of a [graph](#graph) that is connected to other nodes by
      [edges](#edge). Nodes typically have data associated with them, such as
      names or weights.

- key: oop
  en:
    term: object-oriented programming
    def: >
      A style of programming in which functions and data are bound together in
      [objects](#object) that only interact with each other through well-defined
      interfaces.
    acronym: OOP

- key: open_closed_principle
  en:
    term: Open-Closed Principle
    def: >
      A design rule stating that software should be open for extension but
      closed for modification, i.e., it should be possible to extend
      functionality without having to rewrite existing code.

- key: package
  en:
    term: package
    def: >
      A collection of code, data, and documentation that can be distributed and
      re-used. Also referred to in some languages as a [library](#library) or
      [module](#module).

- key: parent_class
  en:
    term: parent class
    def: >
      In [object-oriented programming](#oop), the [class](#class) from which a
      sub class (called the [child class](#child_class)) is derived.

- key: pass_test
  ref:
  - fail_test
  en:
    term: pass (a test)
    def: >
      A test passes if the [actual result](#actual_result) matches the [expected
      result](#expected_result).

- key: pipe
  en:
    term: pipe
    def: >
      To use the output of one computation as the input for the next, or the
      connection between the two computations responsible for the data transfer.
      Pipes were popularized by the [Unix shell](#shell), and are now used in
      many different programming languages and systems.

- key: polymorphism
  en:
    term: polymorphism
    def: >
      Having many different implementations of the same interface. If a set of
      functions or objects are polymorphic, they can be called interchangeably.

- key: query_selector
  en:
    term: query selector
    def: >
      A pattern that specifies a set of [DOM](#dom) nodes.  Query selectors are
      used in [CSS](#css) to specify the elements that rules apply to, or by
      JavaScript programs to manipulate web pages.

- key: race_condition
  en:
    term: race condition
    def: >
      A situation in which a result depends on the order in which two or more
      concurrent operations are carried out.

- key: regular_expression
  en:
    term: regular expression
    def: >
      A pattern for matching text, written as text itself. Regular expressions
      are sometimes called "regexp", "regex", or "RE", and are powerful tools
      for working with text.

- key: relative_error
  en:
    term: relative error
    def: >
      The absolute value of the difference between the actual and correct value
      divided by the correct value. For example, if the actual value is 9 and
      the correct value is 10, the relative error is 0.1. Relative error is
      usually more useful than [absolute error](#absolute_error).

- key: scope_creep
  en:
    term: scope creep
    def: >
      Slow but steady increase in a project's goals after the project starts.

- key: sha_1
  en:
    term: SHA-1 hash
    def: >
      A [cryptographic hash function](#cryptographic_hash_function) that
      produces a 160-bit output.

- key: side_effect
  en:
    term: side effect
    def: >
      A change made by a function while it runs that is visible after the
      function finishes, such as modifying a [global variable](#global_variable)
      or writing to a file. Side effects make programs harder for people to
      understand, since the effects are not necessarily clear at the point in
      the program where the function is called.

- key: singleton
  ref:
  - singleton_pattern
  en:
    term: singleton
    def: >
      A set with only one element, or a [class](#class) with only one
      [instance](#instance).

- key: stream
  en:
    term: stream
    def: >
      A sequential flow of data, such as the [bits](#bit) arriving across a
      network connection or the bytes read from a file.

- key: streaming_api
  en:
    term: streaming API
    def: >
      An [API](#api) that processes data in chunks rather than needing to have
      all of it in memory at once. Streaming APIs usually require
      [handlers](#handler) for events such as "start of data", "next block", and
      "end of data".

- key: tdd
  en:
    term: test-driven development
    def: >
      A programming practice in which tests are written before a new feature is
      added or a [bug](#bug) is fixed in order to clarify the goal.
    acronym: TDD

- key: test_runner
  en:
    term: test runner
    def: >
      A program that finds and runs software tests and reports their results.

- key: test_subject
  en:
    term: test subject
    def: >
      The thing being tested, sometimes also called the system under test (SUT).

- key: throw_exception
  en:
    term: throw (exception)
    def: >
      Another term for [raising](#raise_exception) an exception.

- key: toctou
  en:
    term: Time of check/time of use
    def: >
      A [race condition](#race_condition) in which a process checks the state of
      something and then operates on it, but some other process might alter that
      state between the check and the operation.
    acronym: ToCToU

- key: timestamp
  en:
    term: timestamp
    def: >
      A digital identifier showing the time at which something was created or
      accessed. Timestamps should use [ISO date format](#iso_date_format) for
      portability.

- key: unit_test
  en:
    term: unit test
    def: >
      A test that exercises one function or feature of a piece of software and
      produces [pass](#pass_test), [fail](#fail_test), or [error](#error_test).

- key: utc
  en:
    term: Coordinated Universal Time
    def: >
      The standard time against which all others are defined. UTC is the time at
      longitude 0°, and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.
    acronym: UTC

- key: version_control_system
  en:
    term: version control system
    def: >
      A system for managing changes made to software during its development.

- key: xml
  en:
    term: XML
    def: >
      A set of rules for defining [HTML](#html)-like tags and using them to
      format documents (typically data). XML was popular in the early 2000s, but
      its complexity led many programmers to adopt [JSON](#json), instead.
